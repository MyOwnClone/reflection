Reflection (librefl) is a C library for run-time reflection,
i.e. working with objects of the program from within that program
itself (like what you have in any high-level language).  It works by
interpreting Dwarf debugging information stored at the binary itself.
It uses libelf, libdw and libdwfl of elfutils to read the Dwarf data.

The library is currently in very early stage of development that I
call a "weekend hack", or more euphemistically, "proof of the
concept".  It's not even a "work in progress," because, well, it was a
"weekend hack".  That aside, here's an example of use:

https://github.com/pmachata/reflection/blob/HEAD/userefl.cc

Should this ever grow into something serious, it would presumably also
need to pull in libffi for constructing calls to functions.  In theory
one could use the very same Dwarf information to glean the relevant
ABI bits when constructing the call (though there are known bugs,
e.g. the parameter location information is wrong for struct arguments
on x86_64).  But feeding the right data into the right registers from
C might prove quite tedious, and libffi is the tool for the job.
